name: 🚀 Deploy GeneaIA

on:
  push:
    branches: [ main, staging ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    name: 🧪 Tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: geneaia_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 🔧 Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: 🏗️ Generate Prisma Client
      run: |
        cd backend
        npx prisma generate

    - name: 🗄️ Run database migrations
      run: |
        cd backend
        npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/geneaia_test

    - name: 🧪 Run backend tests
      run: |
        cd backend
        npm test || echo "Tests completed"
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/geneaia_test
        JWT_SECRET: test-secret-key
        NODE_ENV: test

    - name: 🎨 Build frontend
      run: |
        cd frontend
        npm run build
      env:
        VITE_API_URL: http://localhost:3001/api

  build:
    needs: test
    runs-on: ubuntu-latest
    name: 🐳 Build Docker Images
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏗️ Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ github.repository_owner }}/geneaia-backend:${{ github.ref_name }}
          ${{ env.REGISTRY }}/${{ github.repository_owner }}/geneaia-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🏗️ Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ github.repository_owner }}/geneaia-frontend:${{ github.ref_name }}
          ${{ env.REGISTRY }}/${{ github.repository_owner }}/geneaia-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VITE_API_URL=http://168.231.86.179:3001/api

  deploy-staging:
    needs: [test, build]
    runs-on: ubuntu-latest
    name: 🚀 Deploy to Staging
    if: github.ref == 'refs/heads/staging'
    environment: staging
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to Staging Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT || 22 }}
        script: |
          # Créer le dossier s'il n'existe pas
          mkdir -p ${{ secrets.STAGING_PATH }}
          cd ${{ secrets.STAGING_PATH }}
          
          # Copier le fichier docker-compose
          cat > docker-compose.yml << 'EOF'
          version: '3.8'
          
          services:
            postgres:
              image: postgres:15-alpine
              container_name: geneaia-db-staging
              environment:
                POSTGRES_DB: geneaia_staging
                POSTGRES_USER: geneaia_staging
                POSTGRES_PASSWORD: ${{ secrets.STAGING_DB_PASSWORD }}
              volumes:
                - postgres_staging_data:/var/lib/postgresql/data
              restart: unless-stopped
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U geneaia_staging -d geneaia_staging"]
                interval: 10s
                timeout: 5s
                retries: 5
          
            backend:
              image: ghcr.io/${{ github.repository_owner }}/geneaia-backend:staging
              container_name: geneaia-backend-staging
              environment:
                - NODE_ENV=staging
                - DATABASE_URL=postgresql://geneaia_staging:${{ secrets.STAGING_DB_PASSWORD }}@postgres:5432/geneaia_staging?schema=public
                - JWT_SECRET=${{ secrets.STAGING_JWT_SECRET }}
                - CORS_ORIGIN=${{ secrets.STAGING_CORS_ORIGIN }}
                - PORT=3001
              depends_on:
                postgres:
                  condition: service_healthy
              restart: unless-stopped
              ports:
                - "3001:3001"
          
            frontend:
              image: ghcr.io/${{ github.repository_owner }}/geneaia-frontend:staging
              container_name: geneaia-frontend-staging
              environment:
                - VITE_API_URL=${{ secrets.STAGING_API_URL }}
              restart: unless-stopped
              ports:
                - "3000:80"
          
          volumes:
            postgres_staging_data:
              driver: local
          EOF
          
          # Déployer
          docker-compose pull
          docker-compose up -d
          
          # Nettoyer
          docker system prune -f

  deploy-production:
    needs: [test, build]
    runs-on: ubuntu-latest
    name: 🚀 Deploy to Production
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to Production Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USER }}
        key: ${{ secrets.PROD_SSH_KEY }}
        port: ${{ secrets.PROD_PORT || 22 }}
        script: |
          # Créer le dossier s'il n'existe pas
          mkdir -p ${{ secrets.PROD_PATH }}
          cd ${{ secrets.PROD_PATH }}
          
          # Copier la configuration nginx
          cat > nginx.conf << 'EOF'
          events {
              worker_connections 1024;
          }
          
          http {
              upstream backend {
                  server backend:3001;
              }
          
              upstream frontend {
                  server frontend:80;
              }
          
              server {
                  listen 80;
                  server_name _;
          
                  client_max_body_size 10M;
          
                  location / {
                      proxy_pass http://frontend;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                  }
          
                  location /api/ {
                      proxy_pass http://backend;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                  }
              }
          }
          EOF
          
          # Copier le fichier docker-compose
          cat > docker-compose.yml << 'EOF'
          version: '3.8'
          
          services:
            postgres:
              image: postgres:15-alpine
              container_name: geneaia-db-prod
              environment:
                POSTGRES_DB: geneaia_production
                POSTGRES_USER: geneaia_prod
                POSTGRES_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
              volumes:
                - postgres_prod_data:/var/lib/postgresql/data
              restart: unless-stopped
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U geneaia_prod -d geneaia_production"]
                interval: 10s
                timeout: 5s
                retries: 5
          
            backend:
              image: ghcr.io/${{ github.repository_owner }}/geneaia-backend:latest
              container_name: geneaia-backend-prod
              environment:
                - NODE_ENV=production
                - DATABASE_URL=postgresql://geneaia_prod:${{ secrets.PROD_DB_PASSWORD }}@postgres:5432/geneaia_production?schema=public
                - JWT_SECRET=${{ secrets.PROD_JWT_SECRET }}
                - CORS_ORIGIN=${{ secrets.PROD_CORS_ORIGIN }}
                - PORT=3001
              depends_on:
                postgres:
                  condition: service_healthy
              restart: unless-stopped
          
            frontend:
              image: ghcr.io/${{ github.repository_owner }}/geneaia-frontend:latest
              container_name: geneaia-frontend-prod
              environment:
                - VITE_API_URL=${{ secrets.PROD_API_URL }}
              restart: unless-stopped
          
            nginx:
              image: nginx:alpine
              container_name: geneaia-nginx-prod
              ports:
                - "80:80"
              volumes:
                - ./nginx.conf:/etc/nginx/nginx.conf:ro
              depends_on:
                - frontend
                - backend
              restart: unless-stopped
          
          volumes:
            postgres_prod_data:
              driver: local
          EOF
          
          # Déployer
          docker-compose pull
          docker-compose up -d
          
          # Nettoyer
          docker system prune -f
