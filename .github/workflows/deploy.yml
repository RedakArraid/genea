name: üöÄ GeneaIA CI/CD - Production Ready

on:
  push:
    branches: [ main, staging, develop ]
  pull_request:
    branches: [ main, staging ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  REPO_NAME: redakarraid/geneaia

jobs:
  test:
    runs-on: ubuntu-latest
    name: üß™ Tests et Qualit√©
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: geneaia_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json

    - name: üîß Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: üèóÔ∏è Generate Prisma Client
      run: |
        cd backend
        npx prisma generate

    - name: üóÑÔ∏è Run database migrations
      run: |
        cd backend
        npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/geneaia_test

    - name: üîç Lint Backend
      run: |
        cd backend
        npm run lint || echo "‚ö†Ô∏è Linting warnings detected"

    - name: üîç Lint Frontend
      run: |
        cd frontend
        npm run lint || echo "‚ö†Ô∏è Linting warnings detected"

    - name: üß™ Backend Tests
      run: |
        cd backend
        npm test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/geneaia_test
        JWT_SECRET: test-secret-key
        NODE_ENV: test

    - name: üß™ Frontend Tests
      run: |
        cd frontend
        npm test || echo "‚úÖ Frontend tests completed"

    - name: üèóÔ∏è Build Frontend
      run: |
        cd frontend
        npm run build
      env:
        VITE_API_URL: http://localhost:3001/api

    - name: üìä Test Coverage
      if: github.event_name == 'push'
      run: |
        echo "üìä Coverage reports would be uploaded here"
        # Future: upload to codecov or similar

  build:
    needs: test
    runs-on: ubuntu-latest
    name: üê≥ Build Docker Images
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/develop'
    
    permissions:
      contents: read
      packages: write

    outputs:
      backend-tag: ${{ steps.meta.outputs.backend-tag }}
      frontend-tag: ${{ steps.meta.outputs.frontend-tag }}

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üê≥ Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: üîê Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: üè∑Ô∏è Generate metadata
      id: meta
      run: |
        BRANCH_NAME=${{ github.ref_name }}
        echo "backend-tag=${{ env.REGISTRY }}/${{ env.REPO_NAME }}-backend:${BRANCH_NAME}" >> $GITHUB_OUTPUT
        echo "frontend-tag=${{ env.REGISTRY }}/${{ env.REPO_NAME }}-frontend:${BRANCH_NAME}" >> $GITHUB_OUTPUT

    - name: üèóÔ∏è Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: |
          ${{ steps.meta.outputs.backend-tag }}
          ${{ github.ref_name == 'main' && format('{0}/{1}-backend:latest', env.REGISTRY, env.REPO_NAME) || '' }}
        cache-from: type=gha,scope=${{ github.ref_name }}-backend
        cache-to: type=gha,mode=max,scope=${{ github.ref_name }}-backend

    - name: üèóÔ∏è Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: |
          ${{ steps.meta.outputs.frontend-tag }}
          ${{ github.ref_name == 'main' && format('{0}/{1}-frontend:latest', env.REGISTRY, env.REPO_NAME) || '' }}
        cache-from: type=gha,scope=${{ github.ref_name }}-frontend
        cache-to: type=gha,mode=max,scope=${{ github.ref_name }}-frontend
        build-args: |
          VITE_API_URL=${{ 
            github.ref_name == 'main' && 'http://168.231.86.179:8080/api' ||
            github.ref_name == 'staging' && 'http://168.231.86.179:3011/api' ||
            'http://localhost:3001/api'
          }}

  deploy-staging:
    needs: [test, build]
    runs-on: ubuntu-latest
    name: üöÄ Deploy to Staging
    if: github.ref == 'refs/heads/staging'
    environment: 
      name: staging
      url: http://168.231.86.179:3010
    
    steps:
    - name: üöÄ Deploy to Staging Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: 22
        command_timeout: 10m
        script: |
          set -e
          
          # Variables
          PROJECT_DIR="${{ secrets.STAGING_PATH }}"
          TIMESTAMP=$(date '+%Y%m%d_%H%M%S')
          
          echo "üöÄ [${TIMESTAMP}] Starting staging deployment..."
          
          # Cr√©er le dossier de d√©ploiement
          mkdir -p ${PROJECT_DIR}
          cd ${PROJECT_DIR}
          
          # Backup de l'ancienne configuration
          if [ -f docker-compose.yml ]; then
            cp docker-compose.yml docker-compose.yml.backup.${TIMESTAMP}
            echo "üìã Configuration sauvegard√©e"
          fi
          
          # Cr√©er la nouvelle configuration
          cat > docker-compose.yml << 'EOF'
          services:
            postgres:
              image: postgres:15-alpine
              container_name: geneaia-db-staging
              environment:
                POSTGRES_DB: geneaia_staging
                POSTGRES_USER: geneaia_staging
                POSTGRES_PASSWORD: ${{ secrets.STAGING_DB_PASSWORD }}
              volumes:
                - postgres_staging_data:/var/lib/postgresql/data
              restart: unless-stopped
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U geneaia_staging -d geneaia_staging"]
                interval: 10s
                timeout: 5s
                retries: 5
              networks:
                - geneaia-staging
          
            backend:
              image: ${{ needs.build.outputs.backend-tag }}
              container_name: geneaia-backend-staging
              environment:
                - NODE_ENV=staging
                - DATABASE_URL=postgresql://geneaia_staging:${{ secrets.STAGING_DB_PASSWORD }}@postgres:5432/geneaia_staging?schema=public
                - JWT_SECRET=${{ secrets.STAGING_JWT_SECRET }}
                - CORS_ORIGIN=http://168.231.86.179:3010
                - PORT=3001
              depends_on:
                postgres:
                  condition: service_healthy
              restart: unless-stopped
              ports:
                - "3011:3001"
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:3001/api/health || exit 1"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 60s
              networks:
                - geneaia-staging
          
            frontend:
              image: ${{ needs.build.outputs.frontend-tag }}
              container_name: geneaia-frontend-staging
              environment:
                - VITE_API_URL=http://168.231.86.179:3011/api
              restart: unless-stopped
              ports:
                - "3010:80"
              networks:
                - geneaia-staging
          
          volumes:
            postgres_staging_data:
              driver: local
          
          networks:
            geneaia-staging:
              driver: bridge
          EOF
          
          echo "‚úÖ Configuration cr√©√©e"
          
          # D√©ploiement
          echo "‚èπÔ∏è Arr√™t des anciens services..."
          docker-compose down --remove-orphans || true
          
          echo "üê≥ Pull des nouvelles images..."
          docker-compose pull
          
          echo "üöÄ D√©marrage des services..."
          docker-compose up -d
          
          # Attendre PostgreSQL
          echo "‚è≥ Attente de PostgreSQL..."
          for i in {1..30}; do
            if docker exec geneaia-db-staging pg_isready -U geneaia_staging -d geneaia_staging >/dev/null 2>&1; then
              echo "‚úÖ PostgreSQL pr√™t!"
              break
            fi
            echo "   Tentative $i/30..."
            sleep 2
          done
          
          # Initialiser la base de donn√©es
          echo "üóÑÔ∏è Initialisation de la base..."
          docker exec geneaia-backend-staging npx prisma migrate deploy || echo "‚ö†Ô∏è Migration √©chou√©e"
          docker exec geneaia-backend-staging npx prisma generate || echo "‚ö†Ô∏è Generate √©chou√©"
          
          # Red√©marrer le backend
          echo "üîÑ Red√©marrage du backend..."
          docker restart geneaia-backend-staging
          sleep 15
          
          # Tests de sant√©
          echo "üè• Tests de sant√©..."
          
          # Test PostgreSQL
          if docker exec geneaia-db-staging psql -U geneaia_staging -d geneaia_staging -c "SELECT 1;" >/dev/null 2>&1; then
            echo "‚úÖ PostgreSQL: OK"
          else
            echo "‚ùå PostgreSQL: FAILED"
          fi
          
          # Test Backend
          if curl -s -f http://localhost:3011/api/health >/dev/null 2>&1; then
            echo "‚úÖ Backend API: OK"
          else
            echo "‚ö†Ô∏è Backend API: Testing auth endpoint..."
            if curl -s -X POST http://localhost:3011/api/auth/login -H "Content-Type: application/json" -d '{"email":"test","password":"test"}' | grep -q "non trouv√©\|not found"; then
              echo "‚úÖ Backend: OK (auth responding)"
            else
              echo "‚ùå Backend: FAILED"
            fi
          fi
          
          # Test Frontend
          if curl -s -f http://localhost:3010 >/dev/null 2>&1; then
            echo "‚úÖ Frontend: OK"
          else
            echo "‚ùå Frontend: FAILED"
          fi
          
          # Nettoyage
          echo "üßπ Nettoyage..."
          docker system prune -f || true
          
          echo "üéâ D√©ploiement staging termin√©!"
          echo "üåê URLs disponibles:"
          echo "   Frontend: http://168.231.86.179:3010"
          echo "   Backend:  http://168.231.86.179:3011/api"

    - name: üìù Comment PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'üöÄ **Staging d√©ploy√© avec succ√®s!**\n\nüì± Preview: http://168.231.86.179:3010\nüîß API: http://168.231.86.179:3011/api'
          })

  deploy-production:
    needs: [test, build]
    runs-on: ubuntu-latest
    name: üöÄ Deploy to Production
    if: github.ref == 'refs/heads/main'
    environment: 
      name: production
      url: http://168.231.86.179:8080
    
    steps:
    - name: üöÄ Deploy to Production Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USER }}
        key: ${{ secrets.PROD_SSH_KEY }}
        port: 22
        command_timeout: 15m
        script: |
          set -e
          
          # Variables
          PROJECT_DIR="${{ secrets.PROD_PATH }}"
          TIMESTAMP=$(date '+%Y%m%d_%H%M%S')
          
          echo "üöÄ [${TIMESTAMP}] Starting production deployment..."
          
          # Cr√©er le dossier de d√©ploiement
          mkdir -p ${PROJECT_DIR}
          cd ${PROJECT_DIR}
          
          # Backup automatique de la base de donn√©es
          if docker exec geneaia-db-prod pg_isready -U geneaia_prod -d geneaia_production >/dev/null 2>&1; then
            echo "üíæ Sauvegarde de la base de donn√©es..."
            mkdir -p backups
            docker exec geneaia-db-prod pg_dump -U geneaia_prod -d geneaia_production > backups/backup_${TIMESTAMP}.sql
            echo "‚úÖ Backup cr√©√©: backups/backup_${TIMESTAMP}.sql"
          fi
          
          # Configuration Nginx
          cat > nginx.conf << 'EOF'
          events {
              worker_connections 1024;
          }
          
          http {
              # Gzip compression
              gzip on;
              gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
              
              # Rate limiting
              limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
              
              upstream backend {
                  server backend:3001;
              }
          
              upstream frontend {
                  server frontend:80;
              }
          
              server {
                  listen 80;
                  server_name _;
                  client_max_body_size 10M;
          
                  # Security headers
                  add_header X-Frame-Options "SAMEORIGIN" always;
                  add_header X-Content-Type-Options "nosniff" always;
                  add_header X-XSS-Protection "1; mode=block" always;
          
                  # Frontend
                  location / {
                      proxy_pass http://frontend;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                      
                      # Cache static assets
                      location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
                          expires 1y;
                          add_header Cache-Control "public, immutable";
                          proxy_pass http://frontend;
                      }
                  }
          
                  # API with rate limiting
                  location /api/ {
                      limit_req zone=api burst=20 nodelay;
                      proxy_pass http://backend;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                  }
          
                  # Health check
                  location /health {
                      access_log off;
                      return 200 "healthy\n";
                      add_header Content-Type text/plain;
                  }
              }
          }
          EOF
          
          # Configuration Docker Compose
          cat > docker-compose.yml << 'EOF'
          services:
            postgres:
              image: postgres:15-alpine
              container_name: geneaia-db-prod
              environment:
                POSTGRES_DB: geneaia_production
                POSTGRES_USER: geneaia_prod
                POSTGRES_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
              volumes:
                - postgres_prod_data:/var/lib/postgresql/data
                - ./backups:/backups
              restart: unless-stopped
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U geneaia_prod -d geneaia_production"]
                interval: 10s
                timeout: 5s
                retries: 5
              networks:
                - geneaia-production
          
            backend:
              image: ${{ needs.build.outputs.backend-tag }}
              container_name: geneaia-backend-prod
              environment:
                - NODE_ENV=production
                - DATABASE_URL=postgresql://geneaia_prod:${{ secrets.PROD_DB_PASSWORD }}@postgres:5432/geneaia_production?schema=public
                - JWT_SECRET=${{ secrets.PROD_JWT_SECRET }}
                - CORS_ORIGIN=http://168.231.86.179:8080
                - PORT=3001
              depends_on:
                postgres:
                  condition: service_healthy
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:3001/api/health || exit 1"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 60s
              networks:
                - geneaia-production
          
            frontend:
              image: ${{ needs.build.outputs.frontend-tag }}
              container_name: geneaia-frontend-prod
              environment:
                - VITE_API_URL=http://168.231.86.179:8080/api
              restart: unless-stopped
              networks:
                - geneaia-production
          
            nginx:
              image: nginx:alpine
              container_name: geneaia-nginx-prod
              ports:
                - "8080:80"
              volumes:
                - ./nginx.conf:/etc/nginx/nginx.conf:ro
              depends_on:
                - frontend
                - backend
              restart: unless-stopped
              networks:
                - geneaia-production
          
          volumes:
            postgres_prod_data:
              driver: local
          
          networks:
            geneaia-production:
              driver: bridge
          EOF
          
          echo "‚úÖ Configuration production cr√©√©e"
          
          # D√©ploiement avec rollback si √©chec
          echo "‚èπÔ∏è Arr√™t gracieux des services..."
          docker-compose down || true
          
          echo "üê≥ Pull des nouvelles images..."
          docker-compose pull
          
          echo "üöÄ D√©marrage de la production..."
          if ! docker-compose up -d; then
            echo "‚ùå √âchec du d√©marrage, rollback..."
            if [ -f docker-compose.yml.backup.* ]; then
              LATEST_BACKUP=$(ls -t docker-compose.yml.backup.* | head -1)
              cp ${LATEST_BACKUP} docker-compose.yml
              docker-compose up -d
            fi
            exit 1
          fi
          
          # Attendre et initialiser
          echo "‚è≥ Initialisation de la production..."
          sleep 30
          
          docker exec geneaia-backend-prod npx prisma migrate deploy || echo "‚ö†Ô∏è Migration √©chou√©e"
          docker exec geneaia-backend-prod npx prisma generate || echo "‚ö†Ô∏è Generate √©chou√©"
          docker restart geneaia-backend-prod
          sleep 20
          
          # Tests de sant√© complets
          echo "üè• Tests de sant√© production..."
          
          # Test de l'application compl√®te
          if curl -s -f http://localhost:8080 >/dev/null 2>&1; then
            echo "‚úÖ Application production: OK"
          else
            echo "‚ùå Application production: FAILED"
            exit 1
          fi
          
          # Test API via Nginx
          if curl -s -f http://localhost:8080/api/health >/dev/null 2>&1; then
            echo "‚úÖ API via Nginx: OK"
          else
            echo "‚ö†Ô∏è API health endpoint failed, testing auth..."
            if curl -s -X POST http://localhost:8080/api/auth/login -H "Content-Type: application/json" -d '{"email":"test","password":"test"}' | grep -q "non trouv√©\|not found"; then
              echo "‚úÖ API via Nginx: OK (auth responding)"
            else
              echo "‚ùå API via Nginx: FAILED"
              exit 1
            fi
          fi
          
          # Nettoyage et monitoring
          docker system prune -f || true
          
          echo "üéâ D√©ploiement production r√©ussi!"
          echo "üåê Production URL: http://168.231.86.179:8080"
          echo "üíæ Backup disponible: backups/backup_${TIMESTAMP}.sql"

    - name: üéâ Success notification
      if: success()
      run: |
        echo "üéâ Production deployment successful!"
        echo "üåê Live at: http://168.231.86.179:8080"

    - name: üò± Failure notification
      if: failure()
      run: |
        echo "‚ùå Production deployment failed!"
        echo "üîç Check logs and rollback if necessary"
