name: 🚀 CI/CD Pipeline GeneaIA

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 🧪 Phase de test et validation
  test:
    runs-on: ubuntu-latest
    name: 🧪 Tests et Qualité
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: geneaia_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          package-lock.json
          backend/package-lock.json
          frontend/package-lock.json

    - name: 🔧 Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: 🏗️ Generate Prisma Client
      run: |
        cd backend
        npx prisma generate

    - name: 🗄️ Run database migrations
      run: |
        cd backend
        npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/geneaia_test

    - name: 🔍 ESLint Backend
      run: |
        cd backend
        npm run lint || echo "ESLint warnings detected"

    - name: 🔍 ESLint Frontend
      run: |
        cd frontend
        npm run lint || echo "ESLint warnings detected"

    - name: 🧪 Backend Tests
      run: |
        cd backend
        npm test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/geneaia_test
        JWT_SECRET: test-secret-key
        NODE_ENV: test

    - name: 🧪 Frontend Tests
      run: |
        cd frontend
        npm test || echo "Frontend tests completed"

    - name: 🏗️ Build Backend
      run: |
        cd backend
        npm run build || echo "Backend build completed"

    - name: 🎨 Build Frontend
      run: |
        cd frontend
        npm run build
      env:
        VITE_API_URL: ${{ github.ref == 'refs/heads/main' && secrets.PROD_API_URL || 'http://localhost:3001/api' }}

    - name: 📊 Upload Coverage Reports
      uses: codecov/codecov-action@v3
      if: github.event_name == 'push'
      with:
        files: ./backend/coverage/lcov.info,./frontend/coverage/lcov.info
        fail_ci_if_error: false

  # 🐳 Construction des images Docker
  build:
    needs: test
    runs-on: ubuntu-latest
    name: 🐳 Build Docker Images
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏷️ Extract metadata
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏗️ Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🏷️ Extract metadata Frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏗️ Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VITE_API_URL=${{ github.ref == 'refs/heads/main' && secrets.PROD_API_URL || secrets.STAGING_API_URL }}

  # 🚀 Déploiement Staging
  deploy-staging:
    needs: [test, build]
    runs-on: ubuntu-latest
    name: 🚀 Deploy to Staging
    if: github.ref == 'refs/heads/staging'
    environment: staging
    
    steps:
    - name: 🚀 Deploy to Staging Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT || 22 }}
        script: |
          cd ${{ secrets.STAGING_PATH }}
          docker-compose -f docker-compose.staging.yml pull
          docker-compose -f docker-compose.staging.yml up -d
          docker system prune -f

  # 🚀 Déploiement Production
  deploy-production:
    needs: [test, build]
    runs-on: ubuntu-latest
    name: 🚀 Deploy to Production
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 🚀 Deploy to Production Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USER }}
        key: ${{ secrets.PROD_SSH_KEY }}
        port: ${{ secrets.PROD_PORT || 22 }}
        script: |
          cd ${{ secrets.PROD_PATH }}
          docker-compose -f docker-compose.prod.yml pull
          docker-compose -f docker-compose.prod.yml up -d
          docker system prune -f

    - name: 🔔 Notify Success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '🎉 Déploiement production réussi !'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: 🚨 Notify Failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '❌ Échec du déploiement production'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # 🔍 Analyse de sécurité
  security:
    runs-on: ubuntu-latest
    name: 🔍 Security Scan
    if: github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📊 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
