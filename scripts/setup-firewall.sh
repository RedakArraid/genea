#!/bin/bash

# üî• Script de Configuration Pare-feu pour GeneaIA
# Configure UFW pour permettre l'acc√®s via IP publique

set -e

# Couleurs
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

log() { echo -e "${BLUE}[FIREWALL]${NC} $1"; }
success() { echo -e "${GREEN}[OK]${NC} $1"; }
warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; }

echo ""
echo -e "${BLUE}üî• CONFIGURATION PARE-FEU GENEAIA${NC}"
echo "=================================="
echo ""

# V√©rifier les privil√®ges sudo
if [ "$EUID" -ne 0 ]; then
    error "‚ùå Ce script doit √™tre ex√©cut√© avec sudo"
    echo "Usage: sudo ./scripts/setup-firewall.sh"
    exit 1
fi

# D√©tecter l'IP publique
PUBLIC_IP=$(curl -s http://ipv4.icanhazip.com 2>/dev/null || echo "IP_NON_DETECTEE")

log "üåê Configuration du pare-feu pour GeneaIA"
echo ""
echo "IP publique d√©tect√©e: $PUBLIC_IP"
echo ""

# Menu de configuration
echo "Choisissez le niveau de s√©curit√© :"
echo ""
echo "1) üîì D√©veloppement (ports ouverts pour tests)"
echo "2) üîí Production avec Nginx (HTTP/HTTPS + SSH)"
echo "3) üî• Production directe (ports app + SSH)"
echo "4) üìä Voir le statut actuel"
echo "5) üö´ R√©initialiser le pare-feu"
echo ""

read -p "Votre choix (1-5): " choice

case $choice in
    1)
        log "üîì Configuration d√©veloppement..."
        
        # R√©initialiser UFW
        ufw --force reset
        
        # Politique par d√©faut
        ufw default deny incoming
        ufw default allow outgoing
        
        # SSH (obligatoire)
        ufw allow ssh
        
        # Ports GeneaIA
        ufw allow 3001 comment "GeneaIA Backend API"
        ufw allow 8080 comment "GeneaIA Frontend"
        ufw allow 5173 comment "Vite Dev Server"
        
        # Ports web standards
        ufw allow 80 comment "HTTP"
        ufw allow 443 comment "HTTPS"
        
        # Activer UFW
        ufw --force enable
        
        success "‚úÖ Pare-feu configur√© en mode d√©veloppement"
        ;;
        
    2)
        log "üîí Configuration production avec Nginx..."
        
        # R√©initialiser UFW
        ufw --force reset
        
        # Politique par d√©faut
        ufw default deny incoming
        ufw default allow outgoing
        
        # SSH (obligatoire)
        ufw allow ssh
        
        # Web (Nginx reverse proxy)
        ufw allow 'Nginx Full'
        
        # Bloquer l'acc√®s direct aux ports app (s√©curit√©)
        # Les utilisateurs passeront par Nginx
        
        # Activer UFW
        ufw --force enable
        
        success "‚úÖ Pare-feu configur√© pour production avec Nginx"
        warn "‚ö†Ô∏è Configurez Nginx pour proxy vers les ports 3001 et 8080"
        ;;
        
    3)
        log "üî• Configuration production directe..."
        
        # R√©initialiser UFW
        ufw --force reset
        
        # Politique par d√©faut
        ufw default deny incoming
        ufw default allow outgoing
        
        # SSH (obligatoire)
        ufw allow ssh
        
        # Ports GeneaIA
        ufw allow 3001 comment "GeneaIA Backend API"
        ufw allow 8080 comment "GeneaIA Frontend"
        
        # Ports web standards
        ufw allow 80 comment "HTTP"
        ufw allow 443 comment "HTTPS"
        
        # Activer UFW
        ufw --force enable
        
        success "‚úÖ Pare-feu configur√© pour production directe"
        ;;
        
    4)
        log "üìä Statut actuel du pare-feu..."
        echo ""
        
        # Statut UFW
        echo "üî• Statut UFW :"
        ufw status verbose
        echo ""
        
        # Ports ouverts
        echo "üåê Ports en √©coute :"
        netstat -tlnp | grep -E ":(22|80|443|3001|5173|8080)" || echo "Aucun port GeneaIA d√©tect√©"
        echo ""
        
        # Test des ports GeneaIA
        echo "üß™ Tests de connectivit√© :"
        if curl -f http://localhost:3001/health >/dev/null 2>&1; then
            echo "  ‚úÖ Backend API (3001) : Accessible"
        else
            echo "  ‚ùå Backend API (3001) : Non accessible"
        fi
        
        if curl -f http://localhost:8080 >/dev/null 2>&1; then
            echo "  ‚úÖ Frontend (8080) : Accessible"
        else
            echo "  ‚ùå Frontend (8080) : Non accessible"
        fi
        
        if [ "$PUBLIC_IP" != "IP_NON_DETECTEE" ]; then
            echo ""
            echo "üåê Tests depuis l'ext√©rieur :"
            echo "  Testez manuellement :"
            echo "    curl http://$PUBLIC_IP:3001/health"
            echo "    curl http://$PUBLIC_IP:8080"
        fi
        ;;
        
    5)
        log "üö´ R√©initialisation du pare-feu..."
        
        warn "‚ö†Ô∏è Cette action va supprimer toutes les r√®gles actuelles !"
        read -p "Confirmer la r√©initialisation ? (y/N): " confirm
        
        if [[ "$confirm" =~ ^[Yy]$ ]]; then
            ufw --force reset
            ufw --force disable
            
            success "‚úÖ Pare-feu r√©initialis√© et d√©sactiv√©"
            warn "‚ö†Ô∏è Votre serveur n'est plus prot√©g√© !"
            echo "   Reconfigurez le pare-feu rapidement."
        else
            log "‚ùå R√©initialisation annul√©e"
        fi
        ;;
        
    *)
        error "‚ùå Choix invalide"
        exit 1
        ;;
esac

# Affichage final
echo ""
log "üìã Informations finales :"
echo ""

if [ "$choice" != "4" ] && [ "$choice" != "5" ]; then
    echo "üî• Statut UFW :"
    ufw status numbered
    echo ""
fi

if [ "$PUBLIC_IP" != "IP_NON_DETECTEE" ]; then
    echo "üåê Votre application est accessible via :"
    echo "   IP Publique : $PUBLIC_IP"
    echo "   URLs de test :"
    echo "     http://$PUBLIC_IP:3001/health  (API)"
    echo "     http://$PUBLIC_IP:8080         (Frontend)"
    echo ""
fi

echo "üí° Commandes utiles :"
echo "   sudo ufw status           # Voir le statut"
echo "   sudo ufw enable/disable   # Activer/d√©sactiver"
echo "   sudo ufw delete <rule>    # Supprimer une r√®gle"
echo "   netstat -tlnp             # Voir les ports ouverts"

echo ""
success "üéØ Configuration pare-feu termin√©e !"

# Test final automatique
if [ "$choice" = "1" ] || [ "$choice" = "3" ]; then
    echo ""
    log "üß™ Test automatique des services..."
    sleep 2
    
    if curl -f http://localhost:3001/health >/dev/null 2>&1; then
        success "‚úÖ API Backend accessible"
    else
        warn "‚ö†Ô∏è API Backend non accessible"
    fi
    
    if curl -f http://localhost:8080 >/dev/null 2>&1; then
        success "‚úÖ Frontend accessible"
    else
        warn "‚ö†Ô∏è Frontend non accessible (normal si non d√©marr√©)"
    fi
fi