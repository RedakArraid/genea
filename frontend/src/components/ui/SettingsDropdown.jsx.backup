import React, { useState } from 'react';
import { Settings, User, Palette, LogOut, Monitor, Sun, Moon } from 'lucide-react';
import { useAuth } from '../../hooks/useAuth';
import { useTheme } from '../../hooks/useTheme';
import { useNavigate } from 'react-router-dom';
import { useToast } from '../../hooks/useToast';

const SettingsDropdown = () => {
  const { logout, user } = useAuth();
  const { theme, setTheme } = useTheme();
  const { showToast } = useToast();
  const navigate = useNavigate();
  const [isOpen, setIsOpen] = useState(false);

  const handleLogout = () => {
    logout();
    showToast('Vous avez été déconnecté', 'success');
    navigate('/');
    setIsOpen(false);
  };

  const handleThemeChange = (newTheme) => {
    setTheme(newTheme);
    const themeLabels = {
      light: 'Mode clair activé',
      dark: 'Mode sombre activé',
      system: 'Mode système activé'
    };
    showToast(themeLabels[newTheme], 'success');
  };

  const themeOptions = [
    { value: 'light', label: 'Clair', icon: Sun },
    { value: 'dark', label: 'Sombre', icon: Moon },
    { value: 'system', label: 'Système', icon: Monitor }
  ];

  return (
    <div className="relative">
      <button 
        onClick={() => setIsOpen(!isOpen)}
        className="p-2 rounded-lg hover:bg-accent hover:text-accent-foreground transition-colors focus:outline-none focus:ring-2 focus:ring-ring"
        aria-label="Paramètres"
      >
        <Settings className="h-5 w-5" />
      </button>
      
      {isOpen && (
        <>
          {/* Overlay pour fermer le dropdown */}
          <div 
            className="fixed inset-0 z-40" 
            onClick={() => setIsOpen(false)}
          />
          
          {/* Dropdown content */}
          <div className="absolute right-0 mt-2 w-64 bg-popover border border-border rounded-lg shadow-lg z-50 animate-in">
            <div className="p-3">
              {/* User info */}
              <div className="flex items-center gap-3 p-3 bg-muted/50 rounded-lg mb-3">
                <div className="w-10 h-10 bg-primary rounded-full flex items-center justify-center">
                  <User className="h-5 w-5 text-primary-foreground" />
                </div>
                <div className="flex-1 min-w-0">
                  <p className="text-sm font-medium truncate">{user?.name || 'Utilisateur'}</p>
                  <p className="text-xs text-muted-foreground truncate">{user?.email}</p>
                </div>
              </div>
              
              {/* Theme selector */}
              <div className="mb-3">
                <div className="flex items-center gap-2 mb-3">
                  <Palette className="h-4 w-4 text-muted-foreground" />
                  <span className="text-sm font-medium">Apparence</span>
                </div>
                
                <div className="grid grid-cols-1 gap-1">
                  {themeOptions.map((option) => {
                    const Icon = option.icon;
                    const isSelected = theme === option.value;
                    
                    return (
                      <button
                        key={option.value}
                        onClick={() => handleThemeChange(option.value)}
                        className={`
                          flex items-center gap-3 w-full p-2 rounded-md text-sm transition-colors
                          ${isSelected 
                            ? 'bg-primary text-primary-foreground' 
                            : 'hover:bg-accent hover:text-accent-foreground'
                          }
                        `}
                      >
                        <Icon className="h-4 w-4" />
                        <span className="flex-1 text-left">{option.label}</span>
                        {isSelected && (
                          <div className="w-2 h-2 bg-current rounded-full" />
                        )}
                      </button>
                    );
                  })}
                </div>
              </div>
              
              {/* Divider */}
              <div className="border-t border-border my-3" />
              
              {/* Profile link */}
              <button
                onClick={() => {
                  navigate('/profile');
                  setIsOpen(false);
                }}
                className="w-full flex items-center gap-3 p-2 text-sm hover:bg-accent hover:text-accent-foreground rounded-md transition-colors"
              >
                <User className="h-4 w-4" />
                Mon profil
              </button>
              
              {/* Logout */}
              <button
                onClick={handleLogout}
                className="w-full flex items-center gap-3 p-2 text-sm hover:bg-destructive hover:text-destructive-foreground rounded-md transition-colors mt-1"
              >
                <LogOut className="h-4 w-4" />
                Déconnexion
              </button>
            </div>
          </div>
        </>
      )}
    </div>
  );
};

export default SettingsDropdown;