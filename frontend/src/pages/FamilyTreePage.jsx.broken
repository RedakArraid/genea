import React, { useState, useCallback, useEffect, useRef, useMemo } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import ReactFlow, {
  Background,
  Controls,
  MiniMap,
  applyNodeChanges,
  applyEdgeChanges,
  BackgroundVariant,
} from 'reactflow';
import 'reactflow/dist/style.css';
import { AnimatePresence } from 'framer-motion';

// Importer le CSS personnalisé
import '../styles/FamilyTree.css';

// Composants
import PersonNode from '../components/FamilyTree/PersonNode';
import MarriageEdge from '../components/FamilyTree/MarriageEdge';
import NodeContextMenu from '../components/FamilyTree/NodeContextMenu';
import EdgeContextMenu from '../components/FamilyTree/EdgeContextMenu';
import AddPersonModal from '../components/FamilyTree/AddPersonModal';
import EditPersonModal from '../components/FamilyTree/EditPersonModal';
import HelpTooltip from '../components/FamilyTree/HelpTooltip';
import ShortcutNotification from '../components/FamilyTree/ShortcutNotification';
import { useFamilyTreeStore } from '../store/familyTreeStore';
import { useToast } from '../hooks/useToast';
import useKeyboardShortcuts from '../hooks/useKeyboardShortcuts';
import { calculateGenerationLayout, alignSpouses, calculateOptimalPosition, avoidNodeOverlap } from '../utils/familyTreeLayout';
import { 
  findMarriageChildren, 
  calculateChildrenPositions, 
  repositionMarriageChildren,
  calculateNewChildPosition,
  groupChildrenByMarriage 
} from '../utils/marriageChildrenUtils';
import { v4 as uuidv4 } from 'uuid';

// Options ReactFlow
const proOptions = { hideAttribution: true };

// Types d'arêtes personnalisées
const edgeTypes = {
  marriageEdge: MarriageEdge,
};

// Fonction améliorée pour les styles d'arêtes
const getEdgeStyle = (type) => {
  const styles = {
    'spouse_connection': { 
      stroke: '#e11d48', 
      strokeWidth: 4,
      strokeDasharray: '8,4'
    },
    'parent_child_connection': { 
      stroke: '#3b82f6', 
      strokeWidth: 3
    },
    'marriage_child_connection': { 
      stroke: '#10b981', 
      strokeWidth: 3
    },
    'sibling_connection': { 
      stroke: '#8b5cf6', 
      strokeWidth: 2,
      strokeDasharray: '4,2'
    },
    'default': { 
      stroke: '#6b7280', 
      strokeWidth: 2
    }
  };
  
  return styles[type] || styles.default;
};

/**
 * Page d'arbre généalogique avec lignes droites et points de mariage
 * Version améliorée avec toutes les nouvelles fonctionnalités
 */
const FamilyTreePage = () => {
  const { id: treeId } = useParams();
  const navigate = useNavigate();
  const { showToast } = useToast();
  
  // Référence au conteneur ReactFlow
  const reactFlowWrapper = useRef(null);
  
  // États locaux
  const [reactFlowInstance, setReactFlowInstance] = useState(null);
  const [contextMenu, setContextMenu] = useState(null);
  const [edgeContextMenu, setEdgeContextMenu] = useState(null);
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [selectedNode, setSelectedNode] = useState(null);
  const [relationType, setRelationType] = useState(null);
  const [selectedMarriageEdge, setSelectedMarriageEdge] = useState(null);
  const [showHelp, setShowHelp] = useState(false);
  
  // Référence au composant d'aide
  const helpRef = useRef(null);
  
  // Store de l'arbre généalogique
  const {
    currentTree,
    nodes,
    edges,
    isLoading,
    error,
    fetchTreeById,
    resetState,
    updateNodePositions,
    addPerson,
    updatePerson,
    deletePerson,
    addRelationship,
    deleteRelationship,
  } = useFamilyTreeStore();

  // Chargement initial de l'arbre
  useEffect(() => {
    if (treeId) {
      fetchTreeById(treeId);
    }
    
    // Nettoyage au démontage
    return () => resetState();
  }, [treeId, fetchTreeById, resetState]);

  // Appliquer les styles aux arêtes avec les handles ET utiliser des arêtes personnalisées
  const styledEdges = edges.map(edge => {
    // Masquer complètement les arêtes d'enfants de mariage car nous utilisons nos lignes personnalisées
    if (edge.data?.type === 'marriage_child_connection') {
      return {
        ...edge,
        type: 'straight',
        style: { 
          strokeWidth: 0, 
          stroke: 'transparent', 
          opacity: 0 
        },
        sourceHandle: edge.sourceHandle,
        targetHandle: edge.targetHandle,
        hidden: true // Cacher complètement
      };
    }
    
    // Utiliser l'arête personnalisée pour les mariages avec injection des enfants
    if (edge.data?.type === 'spouse_connection') {
      const children = findMarriageChildren(edge.id, nodes, edges);
      const childrenWithPositions = children.map(child => {
        const childNode = nodes.find(n => n.id === child.id);
        return childNode ? {
          id: child.id,
          x: childNode.position.x + 70, // Centre de la carte
          y: childNode.position.y, // Haut de la carte
          name: `${childNode.data.firstName} ${childNode.data.lastName}`
        } : null;
      }).filter(Boolean);
      
      return {
        ...edge,
        type: 'marriageEdge',
        data: {
          ...edge.data,
          children: childrenWithPositions
        },
        sourceHandle: edge.sourceHandle,
        targetHandle: edge.targetHandle
      };
    }
    
    // Styles normaux pour les autres arêtes
    return {
      ...edge,
      type: 'straight',
      style: getEdgeStyle(edge.data?.type || 'parent_child_connection'),
      sourceHandle: edge.sourceHandle,
      targetHandle: edge.targetHandle
    };
  });

  // Gestion des modifications de nœuds (positions)
  const onNodesChange = useCallback(
    (changes) => {
      const updatedNodes = applyNodeChanges(changes, nodes);
      
      // Mise à jour des positions si c'est une position qui a changé
      const positionChanges = changes.filter(change => change.type === 'position' && change.position);
      
      if (positionChanges.length > 0) {
        const nodePositions = positionChanges.map(change => ({
          id: change.id,
          position: change.position
        }));
        
        updateNodePositions(nodePositions);
      }
      
      return updatedNodes;
    },
    [nodes, updateNodePositions]
  );

  // Gestion des modifications d'arêtes
  const onEdgesChange = useCallback(
    (changes) => {
      return applyEdgeChanges(changes, styledEdges);
    },
    [styledEdges]
  );

  // Gestion de la connexion entre nœuds avec handles intelligents - VERSION CORRIGÉE
  const onConnect = useCallback(
    (params) => {
      console.log('Tentative de connexion:', params);
      
      // Détecter le type de relation en fonction des handles utilisés
      const sourceNode = nodes.find(n => n.id === params.source);
      const targetNode = nodes.find(n => n.id === params.target);
      
      if (sourceNode && targetNode) {
        console.log('Nœuds trouvés:', {
          source: sourceNode.data,
          target: targetNode.data,
          sourceHandle: params.sourceHandle,
          targetHandle: params.targetHandle
        });
        
        // Déterminer le type de relation basé sur les handles utilisés
        const isSpouseConnection = 
          (params.sourceHandle && params.sourceHandle.includes('spouse')) ||
          (params.targetHandle && params.targetHandle.includes('spouse'));
        
        console.log('Type de connexion détectée:', isSpouseConnection ? 'Conjugale' : 'Familiale');
        
        let connectionParams = { ...params };
        
        if (isSpouseConnection) {
          // Assurer que les handles conjugaux corrects sont utilisés
          const sourceIsLeft = sourceNode.position.x < targetNode.position.x;
          
          connectionParams = {
            ...params,
            sourceHandle: sourceIsLeft ? 'spouse-right-source' : 'spouse-left-source',
            targetHandle: sourceIsLeft ? 'spouse-left-target' : 'spouse-right-target'
          };
          
          console.log('Handles conjugaux configurés:', {
            sourceIsLeft,
            sourceHandle: connectionParams.sourceHandle,
            targetHandle: connectionParams.targetHandle
          });
        }
        
        const relationshipType = isSpouseConnection ? 'spouse' : 'parent';
        const edgeType = isSpouseConnection ? 'spouse_connection' : 'parent_child_connection';
        
        // Créer un ID unique pour la nouvelle relation
        const newEdgeId = uuidv4();
        
        // Déterminer les handles pour les connexions parent-enfant
        let handles = {};
        if (!isSpouseConnection) {
          // Pour les relations parent-enfant, forcer l'utilisation des handles corrects
          handles = {
            sourceHandle: 'child-source',
            targetHandle: 'parent-target'
          };
        } else {
          handles = {
            sourceHandle: connectionParams.sourceHandle,
            targetHandle: connectionParams.targetHandle
          };
        }
        
        console.log('Données de relation à envoyer:', {
          id: newEdgeId,
          sourceId: params.source,
          targetId: params.target,
          type: relationshipType,
          edgeType,
          handles
        });
        
        // Ajouter la relation au store
        addRelationship({
          id: newEdgeId,
          sourceId: params.source,
          targetId: params.target,
          type: relationshipType,
          data: { type: edgeType },
          ...handles
        });
        
        showToast(`Nouveau lien ${isSpouseConnection ? 'conjugal' : 'familial'} ajouté`, "success");
      }
    },
    [nodes, addRelationship, showToast]
  );