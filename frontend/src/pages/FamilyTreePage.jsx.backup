                </svg>
                Ajuster
              </button>
              <button
                onClick={() => navigate('/dashboard')}
                className="inline-flex items-center px-3 py-2 border border-gray-300 text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition-colors duration-200"
                title="Retour au tableau de bord"
              >
                <svg
                  className="w-4 h-4 mr-2"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M10 19l-7-7m0 0l7-7m-7 7h18"
                  />
                </svg>
                Retour
              </button>
            </div>
          </div>
        </div>
      )}
      
      <div className="flex-grow relative">
        <ReactFlow
          nodes={nodes}
          edges={styledEdges}
          onNodesChange={onNodesChange}
          onEdgesChange={onEdgesChange}
          onConnect={onConnect}
          onInit={setReactFlowInstance}
          onPaneClick={onPaneClick}
          onNodeContextMenu={onNodeContextMenu}
          onEdgeContextMenu={onEdgeContextMenu}
          nodeTypes={nodeTypesWithCallbacks}
          edgeTypes={edgeTypes}
          fitView
          proOptions={proOptions}
          deleteKeyCode={['Backspace', 'Delete']}
          nodesDraggable={true}
          connectionLineType="straight"
          connectionMode="loose"
          connectOnClick={false}
          defaultEdgeOptions={{
            type: 'straight',
            style: { strokeWidth: 2 }
          }}
          connectionLineStyle={{ 
            strokeWidth: 2, 
            stroke: '#94a3b8',
            strokeDasharray: '5,5'
          }}
        >
          <Background 
            variant={BackgroundVariant.Dots} 
            gap={24} 
            size={1} 
            color="hsl(var(--foreground) / 0.1)"
          />
          <Controls position="bottom-right" className="react-flow__controls"/>
          <MiniMap position="bottom-left" className="react-flow__minimap"/>
        </ReactFlow>
        
        {/* Légende */}
        <div className="absolute top-4 left-4 bg-white p-3 rounded-lg shadow-md border">
          <h3 className="font-semibold mb-2 text-gray-800 text-sm">Légende</h3>
          <div className="space-y-1 text-xs">
            <div className="flex items-center gap-2">
              <div className="w-3 h-0.5 bg-blue-500"></div>
              <span className="text-gray-600">Parent-enfant</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-3 h-0.5 bg-red-500" style={{ background: 'repeating-linear-gradient(to right, #e11d48 0, #e11d48 2px, transparent 2px, transparent 4px)' }}></div>
              <span className="text-gray-600">Mariage</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-3 h-0.5 bg-green-500"></div>
              <span className="text-gray-600">Enfant d'union</span>
            </div>
          </div>
          <div className="mt-2 pt-2 border-t border-gray-200">
            <div className="text-xs text-gray-600">
              <div>• Glisser depuis un point rose → Mariage</div>
              <div>• Glisser depuis un point bleu/vert → Parent-enfant</div>
            </div>
          </div>
        </div>
        
        {/* Message d'accueil si l'arbre est vide */}
        {nodes.length === 0 && (
          <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
            <div className="bg-white/90 backdrop-blur-sm rounded-lg shadow-lg p-8 max-w-md text-center">
              <div className="mb-4">
                <svg
                  className="w-16 h-16 mx-auto text-gray-400"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={1.5}
                    d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"
                  />
                </svg>
              </div>
              <h3 className="text-xl font-bold text-gray-900 mb-2">
                Commencez votre arbre généalogique
              </h3>
              <p className="text-gray-600 mb-6">
                Votre arbre est vide pour le moment. Ajoutez votre première personne pour commencer à construire votre histoire familiale.
              </p>
              <button
                onClick={openAddModalStandalone}
                className="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-primary hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition-colors duration-200 pointer-events-auto"
              >
                <svg
                  className="w-5 h-5 mr-2"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M12 6v6m0 0v6m0-6h6m-6 0H6"
                  />
                </svg>
                Ajouter ma première personne
              </button>
            </div>
          </div>
        )}
        
        {/* Bouton flottant pour ajouter une personne */}
        <button
          onClick={openAddModalStandalone}
          className="fixed bottom-6 right-6 z-10 group flex items-center bg-primary text-primary-foreground rounded-full shadow-lg hover:bg-primary/90 hover:shadow-xl transition-all duration-200 px-4 py-3"
          title="Ajouter une personne (Ctrl+N ou +)"
        >
          <svg
            className="w-5 h-5 mr-2 transition-transform group-hover:scale-110"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M12 6v6m0 0v6m0-6h6m-6 0H6"
            />
          </svg>
          <span className="font-medium">Ajouter une personne</span>
        </button>
        
        {/* Composant d'aide */}
        <HelpTooltip isOpen={showHelp} onToggle={toggleHelp} />
        
        {/* Notification des raccourcis */}
        <ShortcutNotification />
        
        {/* Menu contextuel */}
        <AnimatePresence>
          {contextMenu && (
            <NodeContextMenu
              x={contextMenu.x}
              y={contextMenu.y}
              node={contextMenu.node}
              onClose={closeContextMenu}
              onAddPerson={openAddModal}
              onEditPerson={openEditModal}
              onDeletePerson={handleDeletePerson}
              marriageEdges={contextMenu.marriageEdges}
            />
          )}
        </AnimatePresence>
        
        {/* Menu contextuel pour les liens */}
        <AnimatePresence>
          {edgeContextMenu && (
            <EdgeContextMenu
              x={edgeContextMenu.x}
              y={edgeContextMenu.y}
              edge={edgeContextMenu.edge}
              onClose={closeEdgeContextMenu}
              onDeleteEdge={handleDeleteEdge}
              onAddChild={handleAddChildToMarriage}
            />
          )}
        </AnimatePresence>
      </div>
      
      {/* Modals */}
      <AnimatePresence>
        {isAddModalOpen && (
          <AddPersonModal
            isOpen={isAddModalOpen}
            onClose={closeModals}
            onSubmit={handleAddPerson}
            parentNodeId={typeof selectedNode === 'string' ? selectedNode : selectedNode?.id}
            relationType={relationType}
            marriageEdgeId={selectedMarriageEdge}
            treeName={currentTree?.name}
          />
        )}
      </AnimatePresence>
      
      <AnimatePresence>
        {isEditModalOpen && selectedNode && (
          <EditPersonModal
            isOpen={isEditModalOpen}
            onClose={closeModals}
            onSubmit={handleEditPerson}
            nodeData={selectedNode.data}
            nodeId={selectedNode.id}
          />
        )}
      </AnimatePresence>
    </div>
  );
};

export default FamilyTreePage;