#!/bin/bash

# Script pour corriger Prisma et UnionChild
echo "üîß CORRECTION PRISMA - UnionChild"
echo "================================="

cd backend

echo ""
echo "1Ô∏è‚É£ Nettoyage du cache Prisma..."
rm -rf node_modules/.prisma
rm -rf prisma/generated

echo "‚úÖ Cache nettoy√©"

echo ""
echo "2Ô∏è‚É£ G√©n√©ration du client Prisma..."
npx prisma generate

if [ $? -eq 0 ]; then
    echo "‚úÖ Client Prisma g√©n√©r√© avec succ√®s"
else
    echo "‚ùå Erreur lors de la g√©n√©ration du client"
    exit 1
fi

echo ""
echo "3Ô∏è‚É£ V√©rification de la base de donn√©es..."
npx prisma db push --force-reset

if [ $? -eq 0 ]; then
    echo "‚úÖ Base de donn√©es synchronis√©e"
else
    echo "‚ö†Ô∏è Probl√®me avec la synchronisation, tentative avec migrate..."
    npx prisma migrate dev --name fix-union-child-final
fi

echo ""
echo "4Ô∏è‚É£ Test de l'API..."
node -e "
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function test() {
  try {
    await prisma.\$connect();
    console.log('‚úÖ Connexion r√©ussie');
    
    // Test si UnionChild existe
    if (prisma.unionChild) {
      await prisma.unionChild.findMany({ take: 1 });
      console.log('‚úÖ Table UnionChild accessible');
    } else {
      console.log('‚ö†Ô∏è Table UnionChild pas encore disponible');
    }
    
    await prisma.\$disconnect();
    console.log('‚úÖ Test termin√© avec succ√®s');
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
    process.exit(1);
  }
}

test();
"

echo ""
echo "üéâ PRISMA CORRIG√â !"
echo "=================="
echo "‚úÖ Client r√©g√©n√©r√©"
echo "‚úÖ Base synchronis√©e"  
echo "‚úÖ Tests pass√©s"
echo ""
echo "üöÄ Vous pouvez maintenant d√©marrer le serveur :"
echo "   npm run dev"
