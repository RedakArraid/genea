#!/bin/bash

# üß™ Script de Test Backend API GeneaIA
# V√©rifie que l'API est correctement configur√©e pour l'IP publique

set -e

# Couleurs
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

log() { echo -e "${BLUE}[TEST-API]${NC} $1"; }
success() { echo -e "${GREEN}[OK]${NC} $1"; }
warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; }

echo ""
echo -e "${BLUE}üß™ TEST BACKEND API GENEAIA${NC}"
echo "============================"
echo ""

# D√©tecter l'IP publique
PUBLIC_IP=$(curl -s http://ipv4.icanhazip.com 2>/dev/null || echo "IP_NON_DETECTEE")

log "üåê IP publique d√©tect√©e: $PUBLIC_IP"
echo ""

# Tests de connectivit√©
TESTS_PASSED=0
TESTS_TOTAL=0

test_endpoint() {
    local url=$1
    local description=$2
    
    ((TESTS_TOTAL++))
    
    echo -n "Testing $description: "
    
    if curl -f "$url" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ OK${NC}"
        ((TESTS_PASSED++))
    else
        echo -e "${RED}‚ùå FAILED${NC}"
    fi
}

# Test 1: Health check local
log "üîç Tests de connectivit√©..."
echo ""

test_endpoint "http://localhost:3001" "Racine API (localhost)"
test_endpoint "http://localhost:3001/health" "Health check (localhost)"
test_endpoint "http://localhost:3001/api/health" "API Health check (localhost)"

# Test 2: Health check IP publique (si disponible)
if [ "$PUBLIC_IP" != "IP_NON_DETECTEE" ]; then
    echo ""
    log "üåê Tests via IP publique ($PUBLIC_IP)..."
    echo ""
    
    test_endpoint "http://$PUBLIC_IP:3001" "Racine API (IP publique)"
    test_endpoint "http://$PUBLIC_IP:3001/health" "Health check (IP publique)"
    test_endpoint "http://$PUBLIC_IP:3001/api/health" "API Health check (IP publique)"
fi

# Test 3: D√©tails de la r√©ponse health
echo ""
log "üîç Analyse de la r√©ponse health check..."
echo ""

if curl -f http://localhost:3001/health >/dev/null 2>&1; then
    HEALTH_RESPONSE=$(curl -s http://localhost:3001/health)
    
    # V√©rifier les champs essentiels
    if echo "$HEALTH_RESPONSE" | grep -q '"status":"OK"'; then
        success "‚úÖ Status OK trouv√©"
    else
        error "‚ùå Status OK manquant"
    fi
    
    if echo "$HEALTH_RESPONSE" | grep -q '"host":"0.0.0.0"'; then
        success "‚úÖ Host 0.0.0.0 configur√©"
    else
        warn "‚ö†Ô∏è Host pourrait ne pas √™tre configur√© sur 0.0.0.0"
    fi
    
    if echo "$HEALTH_RESPONSE" | grep -q '"accessible_via"'; then
        success "‚úÖ URLs d'acc√®s incluses"
    else
        warn "‚ö†Ô∏è URLs d'acc√®s manquantes"
    fi
    
    echo ""
    log "üìã R√©ponse health check compl√®te:"
    echo "$HEALTH_RESPONSE" | jq . 2>/dev/null || echo "$HEALTH_RESPONSE"
    
else
    error "‚ùå Impossible d'obtenir la r√©ponse health check"
fi

# Test 4: Configuration des ports
echo ""
log "üîå V√©rification des ports..."
echo ""

PORT_3001=$(netstat -tlnp 2>/dev/null | grep ":3001 " || echo "")
if [ -n "$PORT_3001" ]; then
    success "‚úÖ Port 3001 en √©coute"
    echo "   $PORT_3001"
    
    # V√©rifier si c'est sur 0.0.0.0
    if echo "$PORT_3001" | grep -q "0.0.0.0:3001"; then
        success "‚úÖ √âcoute sur toutes les interfaces (0.0.0.0)"
    elif echo "$PORT_3001" | grep -q "127.0.0.1:3001"; then
        warn "‚ö†Ô∏è √âcoute seulement sur localhost (127.0.0.1)"
        warn "   Pour l'IP publique, configurez HOST=0.0.0.0"
    fi
else
    error "‚ùå Port 3001 non trouv√©"
fi

# Test 5: Pare-feu (si UFW install√©)
if command -v ufw >/dev/null 2>&1; then
    echo ""
    log "üî• V√©rification pare-feu..."
    echo ""
    
    UFW_STATUS=$(sudo ufw status 2>/dev/null || echo "inactive")
    if echo "$UFW_STATUS" | grep -q "3001"; then
        success "‚úÖ Port 3001 autoris√© dans UFW"
    elif echo "$UFW_STATUS" | grep -q "inactive"; then
        warn "‚ö†Ô∏è UFW d√©sactiv√©"
    else
        warn "‚ö†Ô∏è Port 3001 non autoris√© dans UFW"
        echo "   Utilisez: sudo ufw allow 3001"
    fi
fi

# R√©sum√© final
echo ""
echo "=================================="
echo -e "${BLUE}üìä R√âSUM√â DES TESTS${NC}"
echo "=================================="
echo ""

if [ $TESTS_PASSED -eq $TESTS_TOTAL ]; then
    success "üéâ TOUS LES TESTS PASS√âS ($TESTS_PASSED/$TESTS_TOTAL)"
    echo ""
    success "‚úÖ Votre backend API est parfaitement configur√© !"
    echo ""
    log "üåê Votre API est accessible via :"
    echo "   Local      : http://localhost:3001"
    if [ "$PUBLIC_IP" != "IP_NON_DETECTEE" ]; then
        echo "   IP Publique: http://$PUBLIC_IP:3001"
    fi
    echo "   Health     : /health ou /api/health"
    
elif [ $TESTS_PASSED -gt 0 ]; then
    warn "‚ö†Ô∏è TESTS PARTIELS ($TESTS_PASSED/$TESTS_TOTAL)"
    echo ""
    warn "üîß Votre API fonctionne localement mais pourrait avoir des probl√®mes d'acc√®s public"
    echo ""
    log "üí° Actions sugg√©r√©es :"
    echo "   1. V√©rifiez le pare-feu: sudo make setup-firewall"
    echo "   2. Red√©marrez l'API: make restart"
    echo "   3. V√©rifiez les logs: pm2 logs geneaia-backend"
    
else
    error "‚ùå √âCHEC DES TESTS ($TESTS_PASSED/$TESTS_TOTAL)"
    echo ""
    error "üõë Votre backend API n'est pas accessible"
    echo ""
    log "üí° Actions de d√©pannage :"
    echo "   1. V√©rifiez que l'API est d√©marr√©e: pm2 status"
    echo "   2. Red√©marrez: make launch"
    echo "   3. V√©rifiez les logs: pm2 logs geneaia-backend"
    echo "   4. V√©rifiez le pare-feu: sudo ufw status"
fi

echo ""
log "üîß Commandes utiles :"
echo "   make launch           # Red√©marrer avec d√©tection IP publique"
echo "   sudo make setup-firewall  # Configurer pare-feu"
echo "   make test-public      # Test rapide acc√®s public"
echo "   pm2 logs geneaia-backend  # Voir les logs backend"

exit 0